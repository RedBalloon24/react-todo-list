{"version":3,"sources":["components/Todo.js","components/NewTodoForm.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","e","preventDefault","updateTodo","target","name","value","toggleTodo","result","CSSTransition","key","timeout","classNames","className","onSubmit","type","onChange","onClick","TransitionGroup","completed","class","Component","NewTodoForm","handleSubmit","createTodo","uuidv4","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f61f4b1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Todo.css'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        }\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleRemove() {\n        this.props.removeTodo(this.props.id)\n    }\n\n    toggleForm() {\n        this.setState({ isEditing: !this.state.isEditing })\n    }\n\n    handleUpdate(e) {\n        e.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.toggleForm();\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleToggle() {\n        this.props.toggleTodo(this.props.id)\n    }\n\n    render() {\n        let result;\n        if(this.state.isEditing) {\n            result = (\n                <CSSTransition key=\"editing\" timeout={500} classNames=\"form\">\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input \n                            type=\"text\" \n                            value={this.state.task} \n                            name=\"task\" \n                            onChange={this.handleChange} \n                        />\n                        <button>Save</button>\n                    </form>\n                </CSSTransition>\n            )\n        } else {\n            result = (\n                <CSSTransition key=\"normal\" timeout={500} classNames=\"task-text\">\n                    <li className=\"Todo-task\" onClick={this.handleToggle}>\n                        {this.props.task}\n                    </li>\n                </CSSTransition>\n              \n            )\n        }\n        return (\n            <TransitionGroup className={this.props.completed ? \"Todo completed\" : \"Todo\"}>\n                {result}\n                <div className=\"Todo-buttons\">\n                    <button onClick={this.toggleForm}>\n                        <i class='fas fa-pen' />\n                    </button>\n                    <button onClick={this.handleRemove}>\n                        <i class='fas fa-trash' />\n                    </button>\n                </div>\n            </TransitionGroup>\n        );\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport './NewTodoForm.css'\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { task: \"\" };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\n        this.setState({ task: \"\" })\n    }\n\n    render() {\n        return (\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Task</label>\n                <input \n                    type=\"text\"\n                    name=\"task\"\n                    id=\"task\"\n                    placeholder=\"e.g: Walk the ferret\"\n                    value={this.state.task}\n                    onChange={this.handleChange}\n                />\n                <button>Add Todo</button>\n            </form>\n        )\n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react'\nimport Todo from './Todo'\nimport NewTodoForm from './NewTodoForm'\nimport './TodoList.css'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            todos: [] \n        };\n        this.create = this.create.bind(this);\n        this.remove = this.remove.bind(this);\n        this.update = this.update.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n\n    create(newTodo) {\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        })\n    }\n\n    remove(id) {\n        this.setState({\n            todos: this.state.todos.filter(t => t.id !== id)\n        })\n    }z\n\n    update(id, updatedTask) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return { ...todo, task: updatedTask };\n            }\n            return todo;\n        })\n        this.setState({ todos: updatedTodos })\n    }\n\n    toggleCompletion (id) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return { ...todo, completed: !todo.completed };\n            }\n            return todo;\n        })\n        this.setState({ todos: updatedTodos })\n    }\n\n    render() {\n        const todos = this.state.todos.map(todo => (\n            <CSSTransition key={todo.id} timeout={500} classNames=\"todo\">\n                <Todo \n                    key={todo.id} \n                    id={todo.id} \n                    task={todo.task} \n                    completed={todo.completed}\n                    removeTodo={this.remove} \n                    updateTodo={this.update}\n                    toggleTodo={this.toggleCompletion}\n                />\n            </CSSTransition> \n            \n        ))\n        return (\n            <div className=\"TodoList\">\n                <h1>Task Master <span>An Animated To Do List With React Hooks</span></h1>\n                <NewTodoForm createTodo={this.create} />\n                <ul>\n                    <TransitionGroup className=\"todo-list\">\n                        {todos}\n                    </TransitionGroup>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}